use anyhow::Result;
use stisty_lib::genetics::{GenomeAnalyzer, GenomeData, lookup_trait_snps};
use std::io::Write;
use tempfile::NamedTempFile;

/// Create a realistic test genome file
fn create_realistic_genome_file() -> Result<NamedTempFile> {
    let mut temp_file = NamedTempFile::new()?;
    let content = r#"# file_id: test-genome-123
# signature: abc123def456
# timestamp: 2025-10-07 12:00:00
#
# This data file is generated by 23andMe.
#
# rsid	chromosome	position	genotype
rs548049170	1	69869	TT
rs9326622	1	567092	CC
rs116587930	1	727841	GG
rs3131972	1	752721	AG
rs12184325	1	754105	CC
rs12567639	1	756268	AA
rs114525117	1	759036	GG
rs12127425	1	794332	GG
rs79373928	1	801536	TT
rs7538305	1	824398	AA
rs116452738	1	834830	GG
rs72631887	1	835092	TT
rs4970383	1	838555	AC
rs28678693	1	838665	TT
rs4970382	1	840753	CT
rs1234567	2	100000	AA
rs1234568	2	200000	TT
rs1234569	2	300000	GG
rs1234570	2	400000	CC
rs1234571	2	500000	AT
rs1234572	2	600000	GC
rs1234577	2	700000	TC
rs1234573	X	100000	AG
rs1234574	X	200000	TC
rs1234575	Y	100000	AA
rs1234576	MT	100000	GG
"#;
    temp_file.write_all(content.as_bytes())?;
    temp_file.flush()?;
    Ok(temp_file)
}

#[test]
fn test_full_workflow_load_and_analyze() -> Result<()> {
    let temp_file = create_realistic_genome_file()?;

    // Load genome data
    let genome = GenomeData::from_file(temp_file.path())?;

    // Verify metadata was parsed
    assert_eq!(genome.metadata.file_id, Some("test-genome-123".to_string()));
    assert_eq!(genome.metadata.signature, Some("abc123def456".to_string()));
    assert_eq!(genome.metadata.timestamp, Some("2025-10-07 12:00:00".to_string()));

    // Verify SNPs loaded
    assert_eq!(genome.total_snps(), 26);

    // Create analyzer
    let analyzer = GenomeAnalyzer::new(&genome);

    // Generate summary
    let summary = analyzer.generate_summary();
    assert_eq!(summary.total_snps, 26);
    assert!(summary.heterozygosity_rate > 0.0);
    assert!(summary.heterozygosity_rate < 1.0);

    Ok(())
}

#[test]
fn test_chromosome_filtering_workflow() -> Result<()> {
    let temp_file = create_realistic_genome_file()?;
    let genome = GenomeData::from_file(temp_file.path())?;

    // Test chromosome filtering
    let chr1_snps = genome.get_snps_by_chromosome("1");
    assert_eq!(chr1_snps.len(), 15);

    let chr2_snps = genome.get_snps_by_chromosome("2");
    assert_eq!(chr2_snps.len(), 7);

    let chrx_snps = genome.get_snps_by_chromosome("X");
    assert_eq!(chrx_snps.len(), 2);

    let chry_snps = genome.get_snps_by_chromosome("Y");
    assert_eq!(chry_snps.len(), 1);

    let chrmt_snps = genome.get_snps_by_chromosome("MT");
    assert_eq!(chrmt_snps.len(), 1);

    Ok(())
}

#[test]
fn test_snp_lookup_workflow() -> Result<()> {
    let temp_file = create_realistic_genome_file()?;
    let genome = GenomeData::from_file(temp_file.path())?;

    // Test individual SNP lookup
    let snp = genome.find_snp("rs548049170");
    assert!(snp.is_some());
    let snp = snp.unwrap();
    assert_eq!(snp.chromosome, "1");
    assert_eq!(snp.position, 69869);
    assert_eq!(snp.genotype, "TT");
    assert!(snp.is_homozygous());

    // Test lookup of non-existent SNP
    let not_found = genome.find_snp("rs999999999");
    assert!(not_found.is_none());

    Ok(())
}

#[test]
fn test_trait_lookup_workflow() -> Result<()> {
    let temp_file = create_realistic_genome_file()?;
    let genome = GenomeData::from_file(temp_file.path())?;

    // Look up multiple SNPs at once
    let trait_rsids = vec!["rs548049170", "rs3131972", "rs4970383"];
    let trait_snps = lookup_trait_snps(&genome, &trait_rsids);

    assert_eq!(trait_snps.len(), 3);
    assert_eq!(trait_snps[0].rsid, "rs548049170");
    assert_eq!(trait_snps[1].rsid, "rs3131972");
    assert_eq!(trait_snps[2].rsid, "rs4970383");

    Ok(())
}

#[test]
fn test_heterozygosity_calculation_workflow() -> Result<()> {
    let temp_file = create_realistic_genome_file()?;
    let genome = GenomeData::from_file(temp_file.path())?;

    // Calculate heterozygosity rate
    let het_rate = genome.heterozygosity_rate();

    // Count actual heterozygous SNPs
    let het_count = genome.snps.iter().filter(|snp| snp.is_heterozygous()).count();
    let expected_rate = het_count as f64 / genome.total_snps() as f64;

    assert!((het_rate - expected_rate).abs() < 0.001);

    Ok(())
}

#[test]
fn test_allele_frequency_calculation_workflow() -> Result<()> {
    let temp_file = create_realistic_genome_file()?;
    let genome = GenomeData::from_file(temp_file.path())?;
    let analyzer = GenomeAnalyzer::new(&genome);

    // Calculate allele frequencies
    let freqs = analyzer.calculate_allele_frequencies();

    // All four bases should be present
    assert!(freqs.contains_key(&'A'));
    assert!(freqs.contains_key(&'T'));
    assert!(freqs.contains_key(&'G'));
    assert!(freqs.contains_key(&'C'));

    // Frequencies should sum to 1.0
    let total: f64 = freqs.values().sum();
    assert!((total - 1.0).abs() < 0.001);

    Ok(())
}

#[test]
fn test_transition_transversion_workflow() -> Result<()> {
    let temp_file = create_realistic_genome_file()?;
    let genome = GenomeData::from_file(temp_file.path())?;
    let analyzer = GenomeAnalyzer::new(&genome);

    // Calculate Ts/Tv ratio
    let ratio = analyzer.transition_transversion_ratio();

    // Ratio should be positive (or 0 if no heterozygous sites)
    assert!(ratio >= 0.0);

    // For a realistic human genome, ratio should be around 2.0-2.1
    // But for this small test set, we just check it's reasonable
    assert!(ratio < 10.0); // Sanity check

    Ok(())
}

#[test]
fn test_summary_report_generation() -> Result<()> {
    let temp_file = create_realistic_genome_file()?;
    let genome = GenomeData::from_file(temp_file.path())?;
    let analyzer = GenomeAnalyzer::new(&genome);

    // Generate summary
    let summary = analyzer.generate_summary();

    // Check summary contains expected data
    assert_eq!(summary.total_snps, 26);
    assert!(!summary.chromosome_counts.is_empty());
    assert!(!summary.allele_frequencies.is_empty());

    // Generate display string
    let display = summary.display();
    assert!(!display.is_empty());
    assert!(display.contains("Total SNPs: 26"));
    assert!(display.contains("Heterozygosity Rate:"));
    assert!(display.contains("Chromosome"));

    Ok(())
}

#[test]
fn test_chromosome_statistics() -> Result<()> {
    let temp_file = create_realistic_genome_file()?;
    let genome = GenomeData::from_file(temp_file.path())?;

    // Get chromosome counts
    let counts = genome.chromosome_counts();

    assert_eq!(*counts.get("1").unwrap(), 15);
    assert_eq!(*counts.get("2").unwrap(), 7);
    assert_eq!(*counts.get("X").unwrap(), 2);
    assert_eq!(*counts.get("Y").unwrap(), 1);
    assert_eq!(*counts.get("MT").unwrap(), 1);

    // Total should equal total SNPs
    let total: usize = counts.values().sum();
    assert_eq!(total, genome.total_snps());

    Ok(())
}

#[test]
fn test_empty_genome_handling() -> Result<()> {
    let mut temp_file = NamedTempFile::new()?;
    let content = r#"# file_id: empty-genome
# rsid	chromosome	position	genotype
"#;
    temp_file.write_all(content.as_bytes())?;
    temp_file.flush()?;

    let genome = GenomeData::from_file(temp_file.path())?;

    assert_eq!(genome.total_snps(), 0);
    assert_eq!(genome.heterozygosity_rate(), 0.0);

    let analyzer = GenomeAnalyzer::new(&genome);
    let freqs = analyzer.calculate_allele_frequencies();
    assert!(freqs.is_empty());

    Ok(())
}

#[test]
fn test_malformed_lines_are_skipped() -> Result<()> {
    let mut temp_file = NamedTempFile::new()?;
    let content = r#"# rsid	chromosome	position	genotype
rs1	1	100	AA
rs2	1	200
rs3	2	300	TT
rs4	X	not_a_number	GG
rs5	Y	500	CC
"#;
    temp_file.write_all(content.as_bytes())?;
    temp_file.flush()?;

    let genome = GenomeData::from_file(temp_file.path())?;

    // Should have 3 valid SNPs (rs1, rs3, rs5)
    // rs2 has invalid format, rs4 has invalid position
    assert_eq!(genome.total_snps(), 3);

    Ok(())
}

#[test]
fn test_large_genome_performance() -> Result<()> {
    let mut temp_file = NamedTempFile::new()?;

    // Create a larger test genome (1000 SNPs)
    let mut content = String::from("# rsid\tchromosome\tposition\tgenotype\n");
    for i in 0..1000 {
        let chr = (i % 22) + 1;
        let genotype = match i % 6 {
            0 => "AA",
            1 => "TT",
            2 => "GG",
            3 => "CC",
            4 => "AG",
            _ => "CT",
        };
        content.push_str(&format!("rs{}\t{}\t{}\t{}\n", i, chr, (i + 1) * 1000, genotype));
    }

    temp_file.write_all(content.as_bytes())?;
    temp_file.flush()?;

    // Load and analyze
    let genome = GenomeData::from_file(temp_file.path())?;
    assert_eq!(genome.total_snps(), 1000);

    let analyzer = GenomeAnalyzer::new(&genome);
    let summary = analyzer.generate_summary();

    assert_eq!(summary.total_snps, 1000);
    assert!(!summary.chromosome_counts.is_empty());

    Ok(())
}

#[test]
fn test_all_chromosomes_present() -> Result<()> {
    let mut temp_file = NamedTempFile::new()?;

    // Create genome with all chromosome types
    let mut content = String::from("# rsid\tchromosome\tposition\tgenotype\n");

    // Autosomes 1-22
    for chr in 1..=22 {
        content.push_str(&format!("rs{}\t{}\t1000\tAA\n", chr, chr));
    }

    // Sex chromosomes
    content.push_str("rsX\tX\t1000\tTT\n");
    content.push_str("rsY\tY\t1000\tGG\n");

    // Mitochondrial
    content.push_str("rsMT\tMT\t1000\tCC\n");

    temp_file.write_all(content.as_bytes())?;
    temp_file.flush()?;

    let genome = GenomeData::from_file(temp_file.path())?;
    let counts = genome.chromosome_counts();

    // Should have 25 chromosome types (1-22, X, Y, MT)
    assert_eq!(counts.len(), 25);
    assert!(counts.contains_key("X"));
    assert!(counts.contains_key("Y"));
    assert!(counts.contains_key("MT"));

    Ok(())
}

#[test]
fn test_realistic_heterozygosity_range() -> Result<()> {
    let temp_file = create_realistic_genome_file()?;
    let genome = GenomeData::from_file(temp_file.path())?;

    let het_rate = genome.heterozygosity_rate();

    // Human heterozygosity is typically 20-35%
    // Our test data should fall within a reasonable range (0-100%)
    assert!(het_rate >= 0.0);
    assert!(het_rate <= 1.0);

    Ok(())
}

#[test]
fn test_display_formatting() -> Result<()> {
    let temp_file = create_realistic_genome_file()?;
    let genome = GenomeData::from_file(temp_file.path())?;
    let analyzer = GenomeAnalyzer::new(&genome);

    let summary = analyzer.generate_summary();
    let display = summary.display();

    // Check that display contains proper formatting
    assert!(display.contains("="));  // Header underline
    assert!(display.contains("Total SNPs:"));
    assert!(display.contains("Heterozygosity Rate:"));
    assert!(display.contains("%"));  // Percentage signs
    assert!(display.contains("Chr"));  // Chromosome label
    assert!(display.contains("Allele Frequencies:"));

    Ok(())
}